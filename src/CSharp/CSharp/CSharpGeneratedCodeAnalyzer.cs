// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Roslynator.CSharp
{
    [Obsolete]
    internal class CSharpGeneratedCodeAnalyzer : GeneratedCodeAnalyzer
    {
        public const string AutoGeneratedTag = "<auto-generated>";

        private static readonly int _autoGeneratedCommentMinLength = AutoGeneratedTag.Length + 2;

        protected override bool IsGeneratedCode(SyntaxTree tree)
        {
            return base.IsGeneratedCode(tree) || BeginsWithAutoGeneratedComment(tree);
        }

        private bool BeginsWithAutoGeneratedComment(SyntaxTree tree)
        {
            if (!tree.TryGetRoot(out SyntaxNode root))
                return false;

            if (root?.Kind() == SyntaxKind.CompilationUnit)
            {
                SyntaxTriviaList leadingTrivia = root.GetLeadingTrivia();

                if (leadingTrivia.Any())
                {
                    foreach (SyntaxTrivia trivia in leadingTrivia)
                    {
                        if (trivia.Kind() == SyntaxKind.SingleLineCommentTrivia)
                        {
                            string text = trivia.ToString();

                            if (text.Length >= _autoGeneratedCommentMinLength
                                && text[0] == '/'
                                && text[1] == '/')
                            {
                                int index = 2;

                                while (index < text.Length
                                    && char.IsWhiteSpace(text[index]))
                                {
                                    index++;
                                }

                                if (string.Compare(text, index, AutoGeneratedTag, 0, AutoGeneratedTag.Length, StringComparison) == 0)
                                    return true;
                            }
                        }
                    }
                }
            }

            return false;
        }
    }
}
