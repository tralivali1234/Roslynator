// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;

namespace Roslynator
{
    internal abstract class SyntaxFactsService
    {
        public static bool IsSupportedLanguage(string language)
        {
            switch (language)
            {
                case LanguageNames.CSharp:
                case LanguageNames.VisualBasic:
                    return true;
                default:
                    return false;
            }
        }

        public abstract string SingleLineCommentStart { get; }

        public abstract bool IsComment(SyntaxTrivia trivia);

        public abstract bool IsSingleLineComment(SyntaxTrivia trivia);

        public abstract bool IsEndOfLineTrivia(SyntaxTrivia trivia);

        public abstract bool IsWhitespaceTrivia(SyntaxTrivia trivia);

        public abstract SyntaxTriviaList ParseLeadingTrivia(string text, int offset = 0);

        public abstract SyntaxTriviaList ParseTrailingTrivia(string text, int offset = 0);

        public abstract bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree);

        public bool IsWhitespaceOrEndOfLineTrivia(in SyntaxTrivia trivia)
        {
            return IsWhitespaceTrivia(trivia) || IsEndOfLineTrivia(trivia);
        }

        public abstract bool BeginsWithAutoGeneratedComment(SyntaxNode root);

        public bool BeginsWithBanner(
            SyntaxNode root,
            ImmutableArray<string> banner)
        {
            SyntaxTriviaList leading = root.GetLeadingTrivia();

            if (banner.Length > leading.Count)
                return false;

            int i = 0;

            while (i < leading.Count
                && IsWhitespaceOrEndOfLineTrivia(leading[i]))
            {
                i++;
            }

            while (i < leading.Count)
            {
                SyntaxTrivia trivia = leading[i];

                if (IsSingleLineComment(trivia))
                {
                    string comment = trivia.ToString();

                    if (string.Compare(
                        banner[i],
                        0,
                        comment,
                        SingleLineCommentStart.Length,
                        comment.Length - SingleLineCommentStart.Length,
                        StringComparison.Ordinal) != 0)
                    {
                        return false;
                    }

                    if (i == banner.Length - 1)
                        return true;

                    i++;

                    if (i == leading.Count
                        || !IsEndOfLineTrivia(leading[i]))
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }

                i++;
            }

            return i == banner.Length;
        }
    }
}
