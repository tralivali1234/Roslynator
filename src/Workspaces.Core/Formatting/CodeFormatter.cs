// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Immutable;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.Options;

namespace Roslynator.Formatting
{
    internal static class CodeFormatter
    {
        public static Task<Project> FormatProjectAsync(
            Project project,
            SyntaxFactsService syntaxFacts,
            CancellationToken cancellationToken = default)
        {
            return FormatProjectAsync(project, syntaxFacts, default(CodeFormatterOptions), cancellationToken);
        }

        public static async Task<Project> FormatProjectAsync(
            Project project,
            SyntaxFactsService syntaxFacts,
            CodeFormatterOptions options,
            CancellationToken cancellationToken = default)
        {
            if (options == null)
                options = CodeFormatterOptions.Default;

            foreach (DocumentId documentId in project.DocumentIds)
            {
                Document document = project.GetDocument(documentId);

                if (options.IncludeGeneratedCode
                    || !GeneratedCodeUtility.IsGeneratedCodeFile(document.FilePath))
                {
                    SyntaxNode root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);

                    if (options.IncludeGeneratedCode
                        || !syntaxFacts.BeginsWithAutoGeneratedComment(root))
                    {
                        DocumentOptionSet optionSet = await document.GetOptionsAsync(cancellationToken).ConfigureAwait(false);

                        Document newDocument = await Formatter.FormatAsync(document, optionSet, cancellationToken).ConfigureAwait(false);

                        project = newDocument.Project;
                    }
                }
            }

            return project;
        }

        internal static async Task<ImmutableArray<DocumentId>> GetFormattedDocumentsAsync(
            Project project,
            Project newProject,
            SyntaxFactsService syntaxFacts)
        {
            ImmutableArray<DocumentId>.Builder builder = null;

            foreach (DocumentId documentId in newProject
                .GetChanges(project)
                .GetChangedDocuments(onlyGetDocumentsWithTextChanges: true))
            {
                Document document = newProject.GetDocument(documentId);

                // https://github.com/dotnet/roslyn/issues/30674
                if ((await document.GetTextChangesAsync(project.GetDocument(documentId)).ConfigureAwait(false)).Any())
                {
#if DEBUG
                    bool success = await Utilities.VerifySyntaxEquivalenceAsync(project.GetDocument(document.Id), document, syntaxFacts).ConfigureAwait(false);
#endif
                    (builder ?? (builder = ImmutableArray.CreateBuilder<DocumentId>())).Add(document.Id);
                }
            }

            return builder?.ToImmutableArray() ?? ImmutableArray<DocumentId>.Empty;
        }
    }
}
